{"ast":null,"code":"import { dispatch } from './middleware';\nimport { addMethods } from './methods';\nconst SEP = '/';\nexport const actions = {};\nexport const addActions = (name, reducers, methods) => {\n  const reducersKeys = Object.keys(reducers);\n  const methodsKeys = Object.keys(methods || {});\n  if (!reducersKeys.length && !methodsKeys.length) return;\n  actions[name] = actions[name] || {};\n  reducersKeys.forEach(key => {\n    // add dispatch\n    actions[name][key] = actionsCreator(name, key);\n  });\n  methodsKeys.forEach(key => {\n    if (actions[name][key]) {\n      throw new Error(`Action name ${key} has been used ! please select an another name as methods name`);\n    } // handle methods\n\n\n    actions[name][key] = actionsCreator(name, key);\n    addMethods(`${name}${SEP}${key}`, methods[key]);\n  });\n};\nexport const actionsCreator = (name, reducerName) => {\n  return data => {\n    dispatch({\n      type: `${name}${SEP}${reducerName}`,\n      data\n    });\n  };\n};\nexport const resolveReducersOrMethods = function (name) {\n  let obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const objKeys = Object.keys(obj);\n  const finalObj = {};\n  objKeys.forEach(key => {\n    finalObj[`${name}${SEP}${key}`] = obj[key];\n  });\n  return finalObj;\n};","map":{"version":3,"sources":["/Users/tanluyang/Desktop/personal/my-redux/my-redux/actions.ts"],"names":["dispatch","addMethods","SEP","actions","addActions","name","reducers","methods","reducersKeys","Object","keys","methodsKeys","length","forEach","key","actionsCreator","Error","reducerName","data","type","resolveReducersOrMethods","obj","objKeys","finalObj"],"mappings":"AAAA,SAASA,QAAT,QAAyB,cAAzB;AACA,SAASC,UAAT,QAA2B,WAA3B;AAEA,MAAMC,GAAG,GAAG,GAAZ;AAEA,OAAO,MAAMC,OAAY,GAAG,EAArB;AAEP,OAAO,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAYC,QAAZ,EAA2BC,OAA3B,KAA6C;AACrE,QAAMC,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYJ,QAAZ,CAArB;AACA,QAAMK,WAAW,GAAGF,MAAM,CAACC,IAAP,CAAYH,OAAO,IAAI,EAAvB,CAApB;AACA,MAAI,CAACC,YAAY,CAACI,MAAd,IAAwB,CAACD,WAAW,CAACC,MAAzC,EAAiD;AACjDT,EAAAA,OAAO,CAACE,IAAD,CAAP,GAAgBF,OAAO,CAACE,IAAD,CAAP,IAAiB,EAAjC;AACAG,EAAAA,YAAY,CAACK,OAAb,CAAqBC,GAAG,IAAI;AAC1B;AACAX,IAAAA,OAAO,CAACE,IAAD,CAAP,CAAcS,GAAd,IAAqBC,cAAc,CAACV,IAAD,EAAOS,GAAP,CAAnC;AACD,GAHD;AAIAH,EAAAA,WAAW,CAACE,OAAZ,CAAqBC,GAAD,IAAS;AAC3B,QAAIX,OAAO,CAACE,IAAD,CAAP,CAAcS,GAAd,CAAJ,EAAwB;AACtB,YAAM,IAAIE,KAAJ,CAAW,eAAcF,GAAI,gEAA7B,CAAN;AACD,KAH0B,CAI3B;;;AACAX,IAAAA,OAAO,CAACE,IAAD,CAAP,CAAcS,GAAd,IAAqBC,cAAc,CAACV,IAAD,EAAOS,GAAP,CAAnC;AACAb,IAAAA,UAAU,CAAE,GAAEI,IAAK,GAAEH,GAAI,GAAEY,GAAI,EAArB,EAAwBP,OAAO,CAACO,GAAD,CAA/B,CAAV;AACD,GAPD;AAQD,CAjBM;AAmBP,OAAO,MAAMC,cAAc,GAAG,CAACV,IAAD,EAAYY,WAAZ,KAAiC;AAC7D,SAAQC,IAAD,IAAe;AACpBlB,IAAAA,QAAQ,CAAC;AACPmB,MAAAA,IAAI,EAAG,GAAEd,IAAK,GAAEH,GAAI,GAAEe,WAAY,EAD3B;AAEPC,MAAAA;AAFO,KAAD,CAAR;AAID,GALD;AAMD,CAPM;AASP,OAAO,MAAME,wBAAwB,GAAG,UAACf,IAAD,EAAiC;AAAA,MAAlBgB,GAAkB,uEAAP,EAAO;AACvE,QAAMC,OAAO,GAAGb,MAAM,CAACC,IAAP,CAAYW,GAAZ,CAAhB;AACA,QAAME,QAAa,GAAG,EAAtB;AACAD,EAAAA,OAAO,CAACT,OAAR,CAAgBC,GAAG,IAAI;AACrBS,IAAAA,QAAQ,CAAE,GAAElB,IAAK,GAAEH,GAAI,GAAEY,GAAI,EAArB,CAAR,GAAkCO,GAAG,CAACP,GAAD,CAArC;AACD,GAFD;AAGA,SAAOS,QAAP;AACD,CAPM","sourcesContent":["import { dispatch } from './middleware'\nimport { addMethods } from './methods'\n\nconst SEP = '/'\n\nexport const actions: any = {}\n\nexport const addActions = (name: any, reducers: any, methods?: any) => {\n  const reducersKeys = Object.keys(reducers)\n  const methodsKeys = Object.keys(methods || {})\n  if (!reducersKeys.length && !methodsKeys.length) return\n  actions[name] = actions[name] || {}\n  reducersKeys.forEach(key => {\n    // add dispatch\n    actions[name][key] = actionsCreator(name, key)\n  })\n  methodsKeys.forEach((key) => {\n    if (actions[name][key]) {\n      throw new Error(`Action name ${key} has been used ! please select an another name as methods name`)\n    }\n    // handle methods\n    actions[name][key] = actionsCreator(name, key)\n    addMethods(`${name}${SEP}${key}`, methods[key])\n  })\n}\n\nexport const actionsCreator = (name: any, reducerName: any) => {\n  return (data: any) => {\n    dispatch({\n      type: `${name}${SEP}${reducerName}`,\n      data\n    })\n  }\n}\n\nexport const resolveReducersOrMethods = (name: string, obj: any = {}) => {\n  const objKeys = Object.keys(obj)\n  const finalObj: any = {}\n  objKeys.forEach(key => {\n    finalObj[`${name}${SEP}${key}`] = obj[key]\n  })\n  return finalObj\n}\n"]},"metadata":{},"sourceType":"module"}