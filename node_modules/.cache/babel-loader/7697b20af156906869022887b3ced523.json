{"ast":null,"code":"import myRedux from '../../my-redux';\nconst {\n  init,\n  actions\n} = myRedux;\ninit({\n  name: 'app',\n  initialState: {\n    count: 0\n  },\n  reducers: {\n    increment(state, data) {\n      return { ...state,\n        count: state.count + data\n      };\n    },\n\n    decrement(state) {\n      return { ...state,\n        count: state.count - 1\n      };\n    }\n\n  },\n  methods: {\n    async incrementAsync() {\n      await new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve(undefined);\n        }, 10);\n      });\n      actions.app.increment(22);\n    }\n\n  }\n});","map":{"version":3,"sources":["/Users/tanluyang/Desktop/personal/my-redux/src/store/app.ts"],"names":["myRedux","init","actions","name","initialState","count","reducers","increment","state","data","decrement","methods","incrementAsync","Promise","resolve","reject","setTimeout","undefined","app"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,gBAApB;AACA,MAAM;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,IAAoBF,OAA1B;AACAC,IAAI,CAAC;AACHE,EAAAA,IAAI,EAAE,KADH;AAEHC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE;AADK,GAFX;AAKHC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,CAACC,KAAD,EAAaC,IAAb,EAA2B;AAClC,aAAO,EACL,GAAGD,KADE;AAELH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,GAAcI;AAFhB,OAAP;AAID,KANO;;AAORC,IAAAA,SAAS,CAACF,KAAD,EAAa;AACpB,aAAO,EACL,GAAGA,KADE;AAELH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,GAAc;AAFhB,OAAP;AAID;;AAZO,GALP;AAmBHM,EAAAA,OAAO,EAAE;AACP,UAAMC,cAAN,GAAuB;AACrB,YAAM,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACrCC,QAAAA,UAAU,CAAC,MAAM;AACfF,UAAAA,OAAO,CAACG,SAAD,CAAP;AACD,SAFS,EAEP,EAFO,CAAV;AAGD,OAJK,CAAN;AAKAf,MAAAA,OAAO,CAACgB,GAAR,CAAYX,SAAZ,CAAsB,EAAtB;AACD;;AARM;AAnBN,CAAD,CAAJ","sourcesContent":["import myRedux from '../../my-redux'\nconst { init, actions } = myRedux\ninit({\n  name: 'app',\n  initialState: {\n    count: 0\n  },\n  reducers: {\n    increment(state: any, data: number) { \n      return {\n        ...state,\n        count: state.count + data\n      }\n    },\n    decrement(state: any) { \n      return {\n        ...state,\n        count: state.count - 1\n      }\n    }\n  },\n  methods: {\n    async incrementAsync() {\n      await new Promise((resolve, reject) => {\n        setTimeout(() => {\n          resolve(undefined)\n        }, 10)\n      })\n      actions.app.increment(22)\n    }\n  }\n})"]},"metadata":{},"sourceType":"module"}