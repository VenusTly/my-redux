{"ast":null,"code":"import { resolveReducersOrMethods, addActions, actions } from \"./actions\";\nexport const models = [];\n\nconst filerReducers = obj => {\n  const objKeys = Object.keys(obj);\n\n  if (objKeys.includes('reset')) {\n    throw new Error(`reset has been used, please selector another name`);\n  }\n\n  return obj;\n};\n\nexport const validateOpts = opts => {\n  const {\n    name,\n    reducers\n  } = opts;\n\n  if (actions[name]) {\n    throw new Error(`${name} has been used, please select another name`);\n  }\n\n  opts.reducers = filerReducers(reducers);\n  opts.reducers = filerReducers(reducers);\n  return opts;\n};\nexport const init = opts => {\n  const {\n    name,\n    initialState,\n    reducers,\n    methods\n  } = validateOpts(opts); // add reset function\n\n  const reset = () => {\n    return initialState;\n  };\n\n  reducers.reset = reset;\n  const resolveReducers = resolveReducersOrMethods(name, reducers); // custom Reducer\n\n  const reducer = getReducer(resolveReducers, initialState);\n  const modelsItem = {\n    name,\n    reducer\n  };\n  models.push(modelsItem);\n  addActions(name, reducers, methods);\n  return modelsItem;\n};\nexport const getReducer = (reducers, initialState) => {\n  // match action type\n  return function () {\n    let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n    let action = arguments.length > 1 ? arguments[1] : undefined;\n\n    if (typeof reducers[action.type] === 'function') {\n      return reducers[action.type](state, action.data);\n    }\n\n    return state;\n  };\n};","map":{"version":3,"sources":["/Users/tanluyang/Desktop/personal/my-redux/my-redux/init.ts"],"names":["resolveReducersOrMethods","addActions","actions","models","filerReducers","obj","objKeys","Object","keys","includes","Error","validateOpts","opts","name","reducers","init","initialState","methods","reset","resolveReducers","reducer","getReducer","modelsItem","push","state","action","type","data"],"mappings":"AAAA,SAASA,wBAAT,EAAmCC,UAAnC,EAA+CC,OAA/C,QAA8D,WAA9D;AAGA,OAAO,MAAMC,MAAa,GAAG,EAAtB;;AASP,MAAMC,aAAa,GAAIC,GAAD,IAAc;AAClC,QAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYH,GAAZ,CAAhB;;AACA,MAAIC,OAAO,CAACG,QAAR,CAAiB,OAAjB,CAAJ,EAA+B;AAC7B,UAAM,IAAIC,KAAJ,CAAW,mDAAX,CAAN;AACD;;AACD,SAAOL,GAAP;AACD,CAND;;AAQA,OAAO,MAAMM,YAAY,GAAIC,IAAD,IAAmB;AAC7C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAqBF,IAA3B;;AACA,MAAIV,OAAO,CAACW,IAAD,CAAX,EAAmB;AACjB,UAAM,IAAIH,KAAJ,CAAW,GAAEG,IAAK,4CAAlB,CAAN;AACD;;AACDD,EAAAA,IAAI,CAACE,QAAL,GAAgBV,aAAa,CAACU,QAAD,CAA7B;AACAF,EAAAA,IAAI,CAACE,QAAL,GAAgBV,aAAa,CAACU,QAAD,CAA7B;AACA,SAAOF,IAAP;AACD,CARM;AAWP,OAAO,MAAMG,IAAI,GAAIH,IAAD,IAAmB;AACrC,QAAM;AAAEC,IAAAA,IAAF;AAAQG,IAAAA,YAAR;AAAsBF,IAAAA,QAAtB;AAAgCG,IAAAA;AAAhC,MAA4CN,YAAY,CAACC,IAAD,CAA9D,CADqC,CAErC;;AACA,QAAMM,KAAK,GAAG,MAAM;AAClB,WAAOF,YAAP;AACD,GAFD;;AAGAF,EAAAA,QAAQ,CAACI,KAAT,GAAiBA,KAAjB;AAEA,QAAMC,eAAe,GAAGnB,wBAAwB,CAACa,IAAD,EAAOC,QAAP,CAAhD,CARqC,CASrC;;AACA,QAAMM,OAAO,GAAGC,UAAU,CAACF,eAAD,EAAkBH,YAAlB,CAA1B;AACA,QAAMM,UAAU,GAAG;AACjBT,IAAAA,IADiB;AAEjBO,IAAAA;AAFiB,GAAnB;AAIAjB,EAAAA,MAAM,CAACoB,IAAP,CAAYD,UAAZ;AACArB,EAAAA,UAAU,CAACY,IAAD,EAAOC,QAAP,EAAiBG,OAAjB,CAAV;AAEA,SAAOK,UAAP;AACD,CAnBM;AAoBP,OAAO,MAAMD,UAAU,GAAG,CAACP,QAAD,EAAgBE,YAAhB,KAAsC;AAC9D;AACA,SAAO,YAA6C;AAAA,QAA5CQ,KAA4C,uEAApCR,YAAoC;AAAA,QAAtBS,MAAsB;;AAClD,QAAI,OAAOX,QAAQ,CAACW,MAAM,CAACC,IAAR,CAAf,KAAiC,UAArC,EAAiD;AAC/C,aAAOZ,QAAQ,CAACW,MAAM,CAACC,IAAR,CAAR,CAAsBF,KAAtB,EAA6BC,MAAM,CAACE,IAApC,CAAP;AACD;;AACD,WAAOH,KAAP;AACD,GALD;AAMD,CARM","sourcesContent":["import { resolveReducersOrMethods, addActions, actions } from \"./actions\"\nimport { AnyAction } from \"redux\"\n\nexport const models: any[] = []\n\ninterface Options {\n  name: string\n  initialState?: object | string | number\n  reducers: any\n  methods?: object\n}\n\nconst filerReducers = (obj: any) => {\n  const objKeys = Object.keys(obj)\n  if (objKeys.includes('reset')) {\n    throw new Error(`reset has been used, please selector another name`)\n  }\n  return obj\n}\n\nexport const validateOpts = (opts: Options) => {\n  const { name, reducers } = opts\n  if (actions[name]) {\n    throw new Error(`${name} has been used, please select another name`)\n  }\n  opts.reducers = filerReducers(reducers)\n  opts.reducers = filerReducers(reducers)\n  return opts\n}\n\n\nexport const init = (opts: Options) => {\n  const { name, initialState, reducers, methods } = validateOpts(opts)\n  // add reset function\n  const reset = () => {\n    return initialState\n  }\n  reducers.reset = reset\n\n  const resolveReducers = resolveReducersOrMethods(name, reducers)\n  // custom Reducer\n  const reducer = getReducer(resolveReducers, initialState)\n  const modelsItem = {\n    name,\n    reducer\n  }\n  models.push(modelsItem)\n  addActions(name, reducers, methods)\n  \n  return modelsItem\n}\nexport const getReducer = (reducers: any, initialState: any) => {\n  // match action type\n  return (state = initialState, action: AnyAction) => {\n    if (typeof reducers[action.type] === 'function') {\n      return reducers[action.type](state, action.data)\n    }\n    return state\n  }\n}"]},"metadata":{},"sourceType":"module"}